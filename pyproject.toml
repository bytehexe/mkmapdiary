[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "mkmapdiary"
dynamic = ["version"]
description = 'A travel journal generator'
readme = "README.md"
requires-python = ">=3.8"
license = "PolyForm-Noncommercial-1.0.0"
keywords = []
authors = [
  { name = "Janna Hopp" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]

dependencies = [
    "click",
    "pyyaml",
    "mkdocs-glightbox",
    "mkdocs-material",
    "mkdocs",
    "doit",
    "identify",
    "Pillow",
    "rawpy",
    "imageio",
    "pyexiftool",
    "tabulate",
    "libsass",
    "requests",
    "jsonschema",
    "lxml",
    "pydub",
    "ollama",
    "gpxpy",
    "hdbscan",
    "pyrosm",
    "msgpack",
    "osmium>=4.0.0",
    "wcwidth",
    "humanfriendly",
    "tzlocal",
    "tzfpy",
    "whenever",
    "platformdirs",
]

[project.optional-dependencies]

transcription = [
    "openai-whisper",
]

all = [
    "openai-whisper",
]

[project.scripts]
mkmapdiary = "mkmapdiary.__main__:cli"

[project.urls]
Documentation = "https://bytehexe.github.io/mkmapdiary/"
Issues = "https://github.com/bytehexe/mkmapdiary/issues"
Source = "https://github.com/bytehexe/mkmapdiary"

[tool.taskipy.tasks]

test = { help = "Run linters and unittests", cmd = "pre-commit run -a" }
serve = { help = "Start mkdocs server", cmd = "hatch run mkdocs:serve" }
demo = { help="Create (if needed) and run the demo", cmd = "hatch run ./tools/demo.py" }
example = { help="Run on the example directory", cmd="hatch run mkmapdiary build -Ba ./example" }
translate = { help="Update translation mo files", cmd = "./tools/update_translations.py" }
lint = { help="An alias for 'test'", cmd="task test" }
run = { help="Run mkmapdiary with the given arguments", cmd="hatch run mkmapdiary" }
run-min = { help="Run mkmapdiary with the given arguments (without extras)", cmd="hatch run min:mkmapdiary" }
fix = { help="Run linters in fix mode", cmd="hatch run ruff:ruff check --fix .; hatch run ruff:ruff format ."}

[tool.pytest.ini_options]
markers = [
    "slow: a test that takes a long time to run.",
    "local: a test that should not run in the pipeline (e.g. due to caching).",
]

[tool.hatch.version]
source = "vcs"

[tool.hatch.version.vcs]
fallback-version = "0.0.0"

[tool.hatch.version.raw-options]
local_scheme = "no-local-version"

[tool.hatch.build.hooks.vcs]
version-file = "src/mkmapdiary/__about__.py"

[tool.hatch.envs.default]
features = ["all"]

[tool.hatch.envs.min]
features = []

[tool.hatch.envs.licenses]
extra-dependencies = [
  "pip-licenses",
]

[tool.hatch.envs.types]
extra-dependencies = [
  "mypy>=1.0.0",
]
features = []

[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/mkmapdiary tests}"

[tool.hatch.envs.mkdocs]
skip-install = true
detached = true
dependencies = [
    "mkdocs-material",
    "plantuml-markdown",
]

[tool.hatch.envs.ruff]
skip-install = true
detached = true
extra-dependencies = [
  "ruff",
]

[tool.hatch.envs.mkdocs.scripts]

serve = "PYTHONPATH=docs/ mkdocs serve --livereload"

[[tool.mypy.overrides]]
module="exiftool.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module="doit.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module="hdbscan.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module="whisper.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module="rawpy.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module="wcwidth.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module="pydub.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module="pytest.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module="sklearn.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module="msgpack.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module="pyrosm.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module="humanfriendly.*"
ignore_missing_imports = true

[tool.coverage.run]
source_pkgs = ["mkmapdiary", "tests"]
branch = true
parallel = true
omit = [
  "src/mkmapdiary/__about__.py",
]

[tool.coverage.paths]
mkmapdiary = ["src/mkmapdiary", "*/mkmapdiary/src/mkmapdiary"]
tests = ["tests", "*/mkmapdiary/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

# Ruff configuration

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
# Also enable isort (`I`), unused imports (`F401`), and other useful rules
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings  
    "F",     # pyflakes
    "I",     # isort
    "UP",    # pyupgrade
    "B",     # flake8-bugbear
    "A",     # flake8-builtins	
    "COM",   # flake8-commas
    #"C90",   # mccabe
    "ANN",   # flake8-annotations
]
ignore = [
  "E501",  # Ignore line too long
  "COM812", # trailing commas
  "ANN401", # Dynamically typed expressions
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true